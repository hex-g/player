package hive.player.repository

import hive.player.entity.Player
import hive.player.entity.PlayerOptions
import hive.player.entity.PlayerSocial

import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest

import spock.lang.Shared
import spock.lang.Specification

@DataJpaTest
class PlayerRepositorySpec extends Specification {

    @Shared
    Player player
    @Shared
    def existentAuthIdList = []
    @Shared
    private PlayerRepository playerRepository

    def createAnCompletePlayer(){
        def social = new PlayerSocial()
        def options = new PlayerOptions(
                "gold",
                "Coffee Titan",
                "on",
                "on",
                "on",
                "on")
        player = new Player(
                "CompletePlayer",
                "alias",
                "email",
                "11985054202",
                "Some flavor text",
                "21/04/1998",
                options,
                social)
        return player
    }

    def createEmptyPlayers(int quantity){
        quantity.times {
            playerRepository.save new Player(it.toString())
            existentAuthIdList+=it.toString()
        }
    }
    @Autowired(required = true)
    def initRepo(PlayerRepository playerRepository){
        this.playerRepository=playerRepository
    }

    def setupSpec(){
        initRepo(playerRepository)
    }

    def setup() {
        createEmptyPlayers 1
    }

    def cleanup() {
        playerRepository.deleteAll()
    }

    def 'Should persist all user profile data'() {

        given: 'an player with complete data'
        def playerToPersist = createAnCompletePlayer()
        def authenticatedId = playerToPersist.getAuthenticatedUserId()

        when: 'create this player'
        playerRepository.save playerToPersist
        def persistedPlayer = playerRepository.findByAuthenticatedUserId authenticatedId

        then: 'all player information should have persisted'
        player == persistedPlayer
    }

    def 'Should return user profile data by authenticatedId'() {

        given: 'existent authenticatedId in database'
        def authenticatedId = existentAuthenticatedId

        when: 'found in database'
        def persistedPlayer = playerRepository.findByAuthenticatedUserId authenticatedId

        then: 'the player exists'
        persistedPlayer != null

        where:
        existentAuthenticatedId << existentAuthIdList
    }

    def 'Should not return an user profile data by authenticatedId'(){

        given: 'existent authenticatedId in database'
        def authenticatedId = "-1"

        when: 'not found in database'
        def persistedPlayer = playerRepository.findByAuthenticatedUserId authenticatedId

        then: 'the player not exists'
        persistedPlayer == null
    }


    def 'Should return the autogenerated playerId by authenticatedId'() {

        given: 'existent userId in database'
        def authenticatedId = existentAuthenticatedId

        when: 'found in database'
        def persistedPlayer = playerRepository.findPlayerIdWithAuthenticatedUserId authenticatedId

        then: 'the player exists'
        persistedPlayer != null

        where:
        existentAuthenticatedId << existentAuthIdList
    }

    def 'Should not return the autogenerated playerId by authenticatedId'(){

        given: 'existent userId in database'
        def authenticatedId = "-1"

        when: 'not found in database'
        def persistedPlayer = playerRepository.findPlayerIdWithAuthenticatedUserId authenticatedId

        then: 'the player not exists'
        persistedPlayer == null
    }
}
