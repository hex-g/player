package hive.player.controller


import hive.player.entity.Player
import hive.player.entity.PlayerOptions
import hive.player.repository.PlayerRepository
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.test.web.servlet.MockMvc
import org.springframework.test.web.servlet.setup.MockMvcBuilders
import spock.lang.Shared
import spock.lang.Specification

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*
import static hive.pandora.constant.HiveInternalHeaders.AUTHENTICATED_USER_ID

class PlayerControllerUnitTest extends Specification {

    def urlBase = 'http://localhost:9600/'
    @Shared Player player
    MockMvc mockMvc
    PlayerRepository playerRepository = Mock()

    def validProfileDataJson = '''
{
    "loginAlias": "custom2",
    "email": "email",
    "telnumber": "11985055502",
    "flavorText": "String grande Lorem Ipsum dolor aquicumsitum amet",
    "birthday": "21/04/1998",
    "options": {
        "laurel_wreath": "ouro",
        "honorific": "titan do caf√©",
        "darkmode": "on",
        "notify_hiveshare": "on",
        "notify_hivecentral": "on",
        "notify_disciplines": "on"
    },
    "social": {
        "github": "git",
        "linkedIn": "linkedin",
        "twitter": "@twitter"
    }
}
                        '''
    def setup(){
        createAnPlayer()
        mockMvc = MockMvcBuilders.standaloneSetup(new PlayerController(playerRepository)).build()
    }

    def createAnPlayer(){
        def options = new PlayerOptions(
                "gold",
                "Coffee Titan",
                "on",
                "on",
                "on",
                "on")
        player = new Player(
                "CompletePlayer",
                "alias",
                "email",
                "11985054202",
                "Some flavor text",
                "21/04/1998",
                options,
                null)
    }

    def "Should return BAD REQUEST when POST a Json with playerId"(){

        given:"a JSON containing playerId"
        def invalidProfileDataJson='{"playerId":10}'

        when:"perform POST"
        def response=mockMvc.perform(post("$urlBase")
                .header(AUTHENTICATED_USER_ID,1)
                .contentType('application/json')
                .content(invalidProfileDataJson))
                .andReturn()
                .getResponse()

        then:"HttpResponse as BAD REQUEST"
        response.getStatus()==400
        response.getErrorMessage()=="The autogenerated playerId should not be in JSON"

    }

    def "Should GET profile data successfully"(){

        given:"Correct header key"
        def headerKey=AUTHENTICATED_USER_ID

        when:"perform GET"
        def response=mockMvc.perform(get("$urlBase")
                .header(headerKey,val))
                .andReturn()
                .getResponse()

        then:"HttpResponse as OK"
        response.getStatus()==200

        where:"numbers or string as header value"
        val | _
        1   | _
        "2" | _

    }

    def "Should POST profile data successfully"(){

        given:"Correct header key"
        def headerKey=AUTHENTICATED_USER_ID

        when:"perform POST with valid json"
        def response=mockMvc.perform(post("$urlBase")
                .header(headerKey,val)
                .contentType('application/json')
                .content(validProfileDataJson))
                .andReturn().getResponse()

        then:"HttpResponse as OK"
        response.getStatus()==200

        where:"numbers or string as header value"
        val | _
        1   | _
        "2" | _

    }

    def "Should return BAD REQUEST when GET with wrong Header"(){

        given:"wrong header key"
        def headerKey="wrong_key"

        and:"not null header value"
        def headerValue=" "

        when:"perform GET"
        def response=mockMvc.perform(get("$urlBase")
                .header(headerKey,headerValue))
                .andReturn()
                .getResponse()

        then:"HttpResponse as BAD REQUEST"
        response.getStatus()==400
    }

    def "Should return BAD REQUEST when POST with wrong Header"(){

        given:"wrong header key"
        def headerKey="wrong_key"

        and:"not null header value"
        def headerValue=" "

        when:"perform POST"
        def response=mockMvc.perform(get("$urlBase")
                .header(headerKey,headerValue))
                .andReturn()
                .getResponse()

        then:"HttpResponse as BAD REQUEST"
        response.getStatus()==400
    }

    def "Should give illegal argument exception when GET profile data"(){

        when:"perform GET"
        def response=mockMvc.perform(get("$urlBase")
                .header(key,val)).andReturn().getResponse()
        println response.status+key+val

        then:
        thrown IllegalArgumentException

        where:"Header key or Header value is empty"
        key                     | val        | _
        AUTHENTICATED_USER_ID   | null       | _
        ""                      | "something"| _
        null                    | "something"| _
    }

    def "Should give illegal argument exception POST profile data"(){

        when:"perform POST with an valid profile data json"
        mockMvc.perform(post("$urlBase")
                .header(key,val)
                .contentType('application/json')
                .content(validProfileDataJson)).andReturn()

        then:
        thrown IllegalArgumentException

        where:"Header key or Header value is empty"
        key                     | val        | _
        AUTHENTICATED_USER_ID   | null       | _
        ""                      | "something"| _
        null                    | "something"| _

    }

}
